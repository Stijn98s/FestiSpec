//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System.Diagnostics;
using FestiApp.Util.Util;

namespace FestiApp.Util
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class GeodanClient 
    {
        private string _baseUrl = "https://services.geodan.nl/geosearch/";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
      
        public GeodanClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
        public string searchType { get; set; } = "/bag?";
        public string preSign { get; set; } = "q=";
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchResult> FreeAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey)
        {
            return FreeAsync(q, q_op, fl, wt, sort, start, rows, servicekey, System.Threading.CancellationToken.None);
        }
        public System.Threading.Tasks.Task<SearchResult> RouteAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey)
        {
            return FreeAsync(q, q_op, fl, wt, sort, start, rows, servicekey, System.Threading.CancellationToken.None);
        }
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SearchResult> FreeAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
        
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append(searchType);
            urlBuilder_.Append(preSign).Append(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture)).Append("&");
            if (q_op != null) 
            {
                urlBuilder_.Append("q.op=").Append(System.Uri.EscapeDataString(ConvertToString(q_op, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fl != null) 
            {
                urlBuilder_.Append("fl=").Append(System.Uri.EscapeDataString(ConvertToString(fl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (wt != null) 
            {
                urlBuilder_.Append("wt=").Append(System.Uri.EscapeDataString(ConvertToString(wt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null) 
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rows != null) 
            {
                urlBuilder_.Append("rows=").Append(System.Uri.EscapeDataString(ConvertToString(rows, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servicekey != null) 
            {
                urlBuilder_.Append("servicekey=").Append(System.Uri.EscapeDataString(ConvertToString(servicekey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchResult); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorMessage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorMessage>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorMessage>("Query string contains bad parameters.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("No credits on given account (`servicekey` parameter) or not logged in.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }


        public async System.Threading.Tasks.Task<Properties2> RouteAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append(searchType);
            urlBuilder_.Append(preSign).Append(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture)).Append("&");
            if (q_op != null)
            {
                urlBuilder_.Append("q.op=").Append(System.Uri.EscapeDataString(ConvertToString(q_op, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fl != null)
            {
                urlBuilder_.Append("fl=").Append(System.Uri.EscapeDataString(ConvertToString(fl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (wt != null)
            {
                urlBuilder_.Append("wt=").Append(System.Uri.EscapeDataString(ConvertToString(wt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null)
            {
                urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null)
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rows != null)
            {
                urlBuilder_.Append("rows=").Append(System.Uri.EscapeDataString(ConvertToString(rows, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servicekey != null)
            {
                urlBuilder_.Append("servicekey=").Append(System.Uri.EscapeDataString(ConvertToString(servicekey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Properties2);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Properties2>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorMessage);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorMessage>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorMessage>("Query string contains bad parameters.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("No credits on given account (`servicekey` parameter) or not logged in.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Properties2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchResult> SuggestAsync(string q, Op2? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey)
        {
            return SuggestAsync(q, q_op, fl, wt, sort, start, rows, servicekey, System.Threading.CancellationToken.None);
        }
    
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SearchResult> SuggestAsync(string q, Op2? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/suggest?");
            urlBuilder_.Append("q=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (q_op != null) 
            {
                urlBuilder_.Append("q.op=").Append(System.Uri.EscapeDataString(ConvertToString(q_op, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fl != null) 
            {
                urlBuilder_.Append("fl=").Append(System.Uri.EscapeDataString(ConvertToString(fl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (wt != null) 
            {
                urlBuilder_.Append("wt=").Append(System.Uri.EscapeDataString(ConvertToString(wt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null) 
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rows != null) 
            {
                urlBuilder_.Append("rows=").Append(System.Uri.EscapeDataString(ConvertToString(rows, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servicekey != null) 
            {
                urlBuilder_.Append("servicekey=").Append(System.Uri.EscapeDataString(ConvertToString(servicekey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchResult); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorMessage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorMessage>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorMessage>("Query string contains bad parameters.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("No credits on given account (`servicekey` parameter) or not logged in.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchResult> LookupAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey)
        {
            return LookupAsync(q, q_op, fl, wt, sort, start, rows, servicekey, System.Threading.CancellationToken.None);
        }
    
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SearchResult> LookupAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/lookup?");
            urlBuilder_.Append("q=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (q_op != null) 
            {
                urlBuilder_.Append("q.op=").Append(System.Uri.EscapeDataString(ConvertToString(q_op, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fl != null) 
            {
                urlBuilder_.Append("fl=").Append(System.Uri.EscapeDataString(ConvertToString(fl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (wt != null) 
            {
                urlBuilder_.Append("wt=").Append(System.Uri.EscapeDataString(ConvertToString(wt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null) 
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rows != null) 
            {
                urlBuilder_.Append("rows=").Append(System.Uri.EscapeDataString(ConvertToString(rows, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servicekey != null) 
            {
                urlBuilder_.Append("servicekey=").Append(System.Uri.EscapeDataString(ConvertToString(servicekey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchResult); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorMessage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorMessage>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorMessage>("Query string contains bad parameters.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("No credits on given account (`servicekey` parameter) or not logged in.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchResult> BagAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey)
        {
            return BagAsync(q, q_op, fl, wt, sort, start, rows, servicekey, System.Threading.CancellationToken.None);
        }
    
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SearchResult> BagAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/bag?");
            urlBuilder_.Append("q=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (q_op != null) 
            {
                urlBuilder_.Append("q.op=").Append(System.Uri.EscapeDataString(ConvertToString(q_op, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fl != null) 
            {
                urlBuilder_.Append("fl=").Append(System.Uri.EscapeDataString(ConvertToString(fl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (wt != null) 
            {
                urlBuilder_.Append("wt=").Append(System.Uri.EscapeDataString(ConvertToString(wt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null) 
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rows != null) 
            {
                urlBuilder_.Append("rows=").Append(System.Uri.EscapeDataString(ConvertToString(rows, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servicekey != null) 
            {
                urlBuilder_.Append("servicekey=").Append(System.Uri.EscapeDataString(ConvertToString(servicekey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchResult); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorMessage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorMessage>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorMessage>("Query string contains bad parameters.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("No credits on given account (`servicekey` parameter) or not logged in.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchResult> BuildingsAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey)
        {
            return BuildingsAsync(q, q_op, fl, wt, sort, start, rows, servicekey, System.Threading.CancellationToken.None);
        }
    
        /// <param name="q">Search query string (combination of terms and operators as mentioned in the introduction).</param>
        /// <param name="q_op">Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</param>
        /// <param name="fl">Fields to be returned in the search results, separated by a comma (`,`). Use `*` to return all fields.</param>
        /// <param name="wt">Type of output used to generate the response.</param>
        /// <param name="sort">Sort order of the search results, specified as ‘[fieldName]+[direction]’. `direction` can be `ASC` or `DESC`.</param>
        /// <param name="start">Offset into query’s result set.</param>
        /// <param name="rows">Maximum number of results to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Search is successful. See introduction for output syntax.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SearchResult> BuildingsAsync(string q, Op? q_op, string fl, Wt? wt, string sort, int? start, int? rows, string servicekey, System.Threading.CancellationToken cancellationToken)
        {
            if (q == null)
                throw new System.ArgumentNullException("q");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/bag/buildings?");
            urlBuilder_.Append("q=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (q_op != null) 
            {
                urlBuilder_.Append("q.op=").Append(System.Uri.EscapeDataString(ConvertToString(q_op, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fl != null) 
            {
                urlBuilder_.Append("fl=").Append(System.Uri.EscapeDataString(ConvertToString(fl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (wt != null) 
            {
                urlBuilder_.Append("wt=").Append(System.Uri.EscapeDataString(ConvertToString(wt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (start != null) 
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rows != null) 
            {
                urlBuilder_.Append("rows=").Append(System.Uri.EscapeDataString(ConvertToString(rows, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servicekey != null) 
            {
                urlBuilder_.Append("servicekey=").Append(System.Uri.EscapeDataString(ConvertToString(servicekey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SearchResult); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorMessage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorMessage>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorMessage>("Query string contains bad parameters.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("No credits on given account (`servicekey` parameter) or not logged in.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="xcoord">X coordinate</param>
        /// <param name="ycoord">Y coordinate</param>
        /// <param name="crs">Spatial Reference System Identifier</param>
        /// <param name="maxFeatures">The maximum number of features to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Successful response.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<NearestResponse> AddressAsync(double? xcoord, double? ycoord, string crs, double? maxFeatures, string servicekey)
        {
            return AddressAsync(xcoord, ycoord, crs, maxFeatures, servicekey, System.Threading.CancellationToken.None);
        }
    
        /// <param name="xcoord">X coordinate</param>
        /// <param name="ycoord">Y coordinate</param>
        /// <param name="crs">Spatial Reference System Identifier</param>
        /// <param name="maxFeatures">The maximum number of features to return.</param>
        /// <param name="servicekey">Authorization key for the service. The value can be requested via [helpdesk@geodan.nl](mailto:helpdesk@geodan.nl).</param>
        /// <returns>Successful response.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<NearestResponse> AddressAsync(double? xcoord, double? ycoord, string crs, double? maxFeatures, string servicekey, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/reverse/address?");
            if (xcoord != null) 
            {
                urlBuilder_.Append("xcoord=").Append(System.Uri.EscapeDataString(ConvertToString(xcoord, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ycoord != null) 
            {
                urlBuilder_.Append("ycoord=").Append(System.Uri.EscapeDataString(ConvertToString(ycoord, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (crs != null) 
            {
                urlBuilder_.Append("crs=").Append(System.Uri.EscapeDataString(ConvertToString(crs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxFeatures != null) 
            {
                urlBuilder_.Append("maxFeatures=").Append(System.Uri.EscapeDataString(ConvertToString(maxFeatures, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (servicekey != null) 
            {
                urlBuilder_.Append("servicekey=").Append(System.Uri.EscapeDataString(ConvertToString(servicekey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(NearestResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<NearestResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The request was invalid or cannot be otherwise served. An accompanying error message will explain further.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("No credits on given account (`servicekey` parameter) or not logged in.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(NearestResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchResult 
    {
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
        public Response Response { get; set; }
    
        /// <summary>Results in HTML format with matching element shown in bold (enclosed in `<b>` tag)</summary>
        [Newtonsoft.Json.JsonProperty("highlighting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Highlighting { get; set; }
    
        [Newtonsoft.Json.JsonProperty("suggest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Suggest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous 
    {
        /// <summary>The name of the dataset to which the `features` or `error` applies.</summary>
        [Newtonsoft.Json.JsonProperty("datasetName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DatasetName { get; set; }
    
        /// <summary>A list of GeoJSON features.</summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<GeoJSONFeature> Features { get; set; }
    
        /// <summary>An error message, in case something went wrong.</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Anonymous FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NearestResponse : System.Collections.ObjectModel.ObservableCollection<Anonymous>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NearestResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NearestResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeoJSONFeature 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeoJSONFeatureType Type { get; set; } = FestiApp.Util.GeoJSONFeatureType.Feature;
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Properties { get; set; } = new object();
    
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoJSONGeometry Geometry { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoJSONFeature FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoJSONFeature>(data);
        }
    
    }
    
    /// <summary>A valid [GeoJSON geometry](http://geojson.org/geojson-spec.html). Currently this cannot be modeled very well in Swagger.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GeoJSONGeometry 
    {
        /// <summary>type of geometry</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeoJSONGeometryType Type { get; set; }
    
        /// <summary>list of coordinates</summary>
        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Tuple<double, double> Coordinates { get; set; }
    
        /// <summary>list of geometries</summary>
        [Newtonsoft.Json.JsonProperty("geometries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Tuple<GeoJSONGeometry> Geometries { get; set; }
    
        /// <summary>coordinate reference system</summary>
        [Newtonsoft.Json.JsonProperty("crs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Crs Crs { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoJSONGeometry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoJSONGeometry>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ErrorMessage 
    {
        /// <summary>Error message from service backend.</summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }
    
        /// <summary>HTTP error code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Code { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorMessage>(data);
        }
    
    }
    
    /// <summary>Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Op
    {
        [System.Runtime.Serialization.EnumMember(Value = "AND")]
        AND = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OR")]
        OR = 1,
    
    }
    
    /// <summary>Type of output used to generate the response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Wt
    {
        [System.Runtime.Serialization.EnumMember(Value = "json")]
        Json = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "xml")]
        Xml = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "csv")]
        Csv = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "php")]
        Php = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "phps")]
        Phps = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "python")]
        Python = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ruby")]
        Ruby = 6,
    
    }
    
    /// <summary>Default operator for query expressions. When not specified `AND` or `OR` in the query parameter, this operator is used to concatenate the terms.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Op2
    {
        [System.Runtime.Serialization.EnumMember(Value = "AND")]
        AND = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "OR")]
        OR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("numFound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumFound { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxScore { get; set; }
    
        [Newtonsoft.Json.JsonProperty("docs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<object> Docs { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GeoJSONFeatureType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Feature")]
        Feature = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum GeoJSONGeometryType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Point")]
        Point = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MultiPoint")]
        MultiPoint = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "LineString")]
        LineString = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "MultiLineString")]
        MultiLineString = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Polygon")]
        Polygon = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "MultiPolygon")]
        MultiPolygon = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "GeometryCollection")]
        GeometryCollection = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Crs 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Properties Properties { get; set; } = new Properties();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Crs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Crs>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Properties 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Properties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Properties>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}